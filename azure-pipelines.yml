trigger:
  branches:
    include:
      - '*'

pool: mp-windows-2025

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl --version
    pwsh: true
  displayName: check wsl version

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl --install Ubuntu
    pwsh: true
  displayName: install wsl distro

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl -d Ubuntu --exec dbus-launch true
    pwsh: true
  displayName: prevent wsl reboot

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      wsl -- sudo apt-get update
      wsl -- sudo apt-get install dos2unix
      wsl -- dos2unix ./docker-install.sh
      wsl -- ./docker-install.sh
    pwsh: true
  displayName: install docker

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      wsl -- sudo docker compose pull -q  
      wsl -- sudo docker compose -p test-setup up -d
    pwsh: true
  displayName: compose up (wsl)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl -- sudo docker ps
    pwsh: true
  displayName: docker ps (wsl)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: docker ps
    pwsh: true
  displayName: docker ps (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $miliSeconds = 60 * 1000
      [System.Threading.Tasks.Task]::Delay($miliSeconds).Wait()
    pwsh: true
  displayName: wait on db (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl -- sudo docker ps -a
    pwsh: true
  displayName: docker ps -a (wsl)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl -- sudo docker compose -p test-setup logs
    pwsh: true
  displayName: compose logs (wsl)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: wsl -- curl http://localhost:8080
    pwsh: true
  displayName: curl (wsl)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: Invoke-WebRequest -Uri http://localhost:8080
    pwsh: true
  displayName: web-request (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Invoke-Sqlcmd `
      -ServerInstance "127.0.0.1,1433" `
      -Database master `
      -Username "sa" `
      -Password "SecretPassword9!" `
      -TrustServer `
      -Query "SELECT name FROM sys.databases"
    pwsh: true
  displayName: execute test query (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Invoke-Sqlcmd `
      -ServerInstance "127.0.0.1,1433" `
      -Database master `
      -Username "sa" `
      -Password "SecretPassword9!" `
      -TrustServer `
      -Query "RESTORE DATABASE test FROM DISK = '/var/opt/mssql/backup/test.bak' WITH REPLACE;"
    pwsh: true
  displayName: restore db query (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Invoke-Sqlcmd `
      -ServerInstance "127.0.0.1,1433" `
      -Database test `
      -Username "sa" `
      -Password "SecretPassword9!" `
      -TrustServer `
      -Query "SELECT * FROM Person;"
    pwsh: true
  displayName: execute test query (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: docker pull mcr.microsoft.com/dotnet/samples:aspnetapp-8.0-nanoserver-ltsc2022 -q
    pwsh: true
  displayName: pull 2022

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: docker run -d -p 8081:8080 --isolation=process --name aspnetcore_sample mcr.microsoft.com/dotnet/samples:aspnetapp-8.0-nanoserver-ltsc2022
    pwsh: true
  displayName: run 2022

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: docker pull mcr.microsoft.com/dotnet/aspnet:8.0-windowsservercore-ltsc2025
    pwsh: true
  displayName: pull 2025 (windows)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: docker run --rm --isolation=process mcr.microsoft.com/windows/servercore:ltsc2025-amd64 powershell -Command "Write-Host 'Hello from the other side!'"
    pwsh: true
  displayName: run 2025 (windows) - powershell hello

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: Invoke-WebRequest -Uri http://localhost:8080
    pwsh: true
  displayName: web-request (windows) - proof linux container still works

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: Invoke-WebRequest -Uri http://localhost:8081
    pwsh: true
  displayName: web-request (windows) - check that asp.net 2022 works
